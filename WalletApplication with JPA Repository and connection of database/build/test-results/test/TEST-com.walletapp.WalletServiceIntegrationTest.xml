<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="com.walletapp.WalletServiceIntegrationTest" tests="11" skipped="0" failures="0" errors="0" timestamp="2023-03-02T09:12:13" hostname="WGC1009VT1F63" time="0.918">
  <properties/>
  <testcase name="fundtransferTest()" classname="com.walletapp.WalletServiceIntegrationTest" time="0.641"/>
  <testcase name="addFundsToWalletByIdTest()" classname="com.walletapp.WalletServiceIntegrationTest" time="0.025"/>
  <testcase name="deleteWalletByIdThrowsExceptionTest()" classname="com.walletapp.WalletServiceIntegrationTest" time="0.017"/>
  <testcase name="addFundsToWalletByIdTestException()" classname="com.walletapp.WalletServiceIntegrationTest" time="0.023"/>
  <testcase name="registerWalletTest()" classname="com.walletapp.WalletServiceIntegrationTest" time="0.018"/>
  <testcase name="deleteWalletByIdTest()" classname="com.walletapp.WalletServiceIntegrationTest" time="0.029"/>
  <testcase name="withdraFundsToWalletByIdTest()" classname="com.walletapp.WalletServiceIntegrationTest" time="0.04"/>
  <testcase name="getWalletByIdTest()" classname="com.walletapp.WalletServiceIntegrationTest" time="0.023"/>
  <testcase name="updateWalletTestold()" classname="com.walletapp.WalletServiceIntegrationTest" time="0.033"/>
  <testcase name="getWalletByIdThrowsExceptionTest()" classname="com.walletapp.WalletServiceIntegrationTest" time="0.018"/>
  <testcase name="updateWalletTest()" classname="com.walletapp.WalletServiceIntegrationTest" time="0.027"/>
  <system-out><![CDATA[14:42:02.123 [Test worker] DEBUG org.springframework.test.context.BootstrapUtils - Instantiating CacheAwareContextLoaderDelegate from class [org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate]
14:42:02.146 [Test worker] DEBUG org.springframework.test.context.BootstrapUtils - Instantiating BootstrapContext using constructor [public org.springframework.test.context.support.DefaultBootstrapContext(java.lang.Class,org.springframework.test.context.CacheAwareContextLoaderDelegate)]
14:42:02.225 [Test worker] DEBUG org.springframework.test.context.BootstrapUtils - Instantiating TestContextBootstrapper for test class [com.walletapp.WalletServiceIntegrationTest] from class [org.springframework.boot.test.context.SpringBootTestContextBootstrapper]
14:42:02.248 [Test worker] INFO org.springframework.boot.test.context.SpringBootTestContextBootstrapper - Neither @ContextConfiguration nor @ContextHierarchy found for test class [com.walletapp.WalletServiceIntegrationTest], using SpringBootContextLoader
14:42:02.256 [Test worker] DEBUG org.springframework.test.context.support.AbstractContextLoader - Did not detect default resource location for test class [com.walletapp.WalletServiceIntegrationTest]: class path resource [com/walletapp/WalletServiceIntegrationTest-context.xml] does not exist
14:42:02.257 [Test worker] DEBUG org.springframework.test.context.support.AbstractContextLoader - Did not detect default resource location for test class [com.walletapp.WalletServiceIntegrationTest]: class path resource [com/walletapp/WalletServiceIntegrationTestContext.groovy] does not exist
14:42:02.257 [Test worker] INFO org.springframework.test.context.support.AbstractContextLoader - Could not detect default resource locations for test class [com.walletapp.WalletServiceIntegrationTest]: no resource found for suffixes {-context.xml, Context.groovy}.
14:42:02.259 [Test worker] INFO org.springframework.test.context.support.AnnotationConfigContextLoaderUtils - Could not detect default configuration classes for test class [com.walletapp.WalletServiceIntegrationTest]: WalletServiceIntegrationTest does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
14:42:02.347 [Test worker] DEBUG org.springframework.test.context.support.ActiveProfilesUtils - Could not find an 'annotation declaring class' for annotation type [org.springframework.test.context.ActiveProfiles] and class [com.walletapp.WalletServiceIntegrationTest]
14:42:02.481 [Test worker] DEBUG org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider - Identified candidate component class: file [C:\Users\SSARA127\Music\WalletApplication with connection of database\build\classes\java\main\com\walletapp\WalletAppApplication.class]
14:42:02.527 [Test worker] INFO org.springframework.boot.test.context.SpringBootTestContextBootstrapper - Found @SpringBootConfiguration com.walletapp.WalletAppApplication for test class com.walletapp.WalletServiceIntegrationTest
14:42:02.722 [Test worker] DEBUG org.springframework.boot.test.context.SpringBootTestContextBootstrapper - @TestExecutionListeners is not present for class [com.walletapp.WalletServiceIntegrationTest]: using defaults.
14:42:02.724 [Test worker] INFO org.springframework.boot.test.context.SpringBootTestContextBootstrapper - Loaded default TestExecutionListener class names from location [META-INF/spring.factories]: [org.springframework.boot.test.autoconfigure.restdocs.RestDocsTestExecutionListener, org.springframework.boot.test.autoconfigure.web.client.MockRestServiceServerResetTestExecutionListener, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrintOnlyOnFailureTestExecutionListener, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverTestExecutionListener, org.springframework.boot.test.autoconfigure.webservices.client.MockWebServiceServerTestExecutionListener, org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener, org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListener, org.springframework.test.context.web.ServletTestExecutionListener, org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener, org.springframework.test.context.event.ApplicationEventsTestExecutionListener, org.springframework.test.context.support.DependencyInjectionTestExecutionListener, org.springframework.test.context.support.DirtiesContextTestExecutionListener, org.springframework.test.context.transaction.TransactionalTestExecutionListener, org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener, org.springframework.test.context.event.EventPublishingTestExecutionListener]
14:42:02.769 [Test worker] INFO org.springframework.boot.test.context.SpringBootTestContextBootstrapper - Using TestExecutionListeners: [org.springframework.test.context.web.ServletTestExecutionListener@5ab14cb9, org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener@5fb97279, org.springframework.test.context.event.ApplicationEventsTestExecutionListener@439a8f59, org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener@61861a29, org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener@31024624, org.springframework.test.context.support.DirtiesContextTestExecutionListener@25bcd0c7, org.springframework.test.context.transaction.TransactionalTestExecutionListener@32cb636e, org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener@63cd604c, org.springframework.test.context.event.EventPublishingTestExecutionListener@40dd3977, org.springframework.boot.test.autoconfigure.restdocs.RestDocsTestExecutionListener@3a4e343, org.springframework.boot.test.autoconfigure.web.client.MockRestServiceServerResetTestExecutionListener@6a1d204a, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrintOnlyOnFailureTestExecutionListener@62dae245, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverTestExecutionListener@4b6579e8, org.springframework.boot.test.autoconfigure.webservices.client.MockWebServiceServerTestExecutionListener@6fff253c, org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListener@6c6357f9]
14:42:02.776 [Test worker] DEBUG org.springframework.test.context.support.AbstractDirtiesContextTestExecutionListener - Before test class: context [DefaultTestContext@7859e786 testClass = WalletServiceIntegrationTest, testInstance = [null], testMethod = [null], testException = [null], mergedContextConfiguration = [WebMergedContextConfiguration@285d851a testClass = WalletServiceIntegrationTest, locations = '{}', classes = '{class com.walletapp.WalletAppApplication}', contextInitializerClasses = '[]', activeProfiles = '{}', propertySourceLocations = '{}', propertySourceProperties = '{org.springframework.boot.test.context.SpringBootTestContextBootstrapper=true}', contextCustomizers = set[org.springframework.boot.test.autoconfigure.actuate.metrics.MetricsExportContextCustomizerFactory$DisableMetricExportContextCustomizer@1b835480, org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizer@0, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverContextCustomizerFactory$Customizer@149dd36b, org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizer@691939c9, org.springframework.boot.test.json.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer@61a88b8c, org.springframework.boot.test.mock.mockito.MockitoContextCustomizer@0, org.springframework.boot.test.web.client.TestRestTemplateContextCustomizer@22bac7bc, org.springframework.boot.test.context.SpringBootTestArgs@1, org.springframework.boot.test.context.SpringBootTestWebEnvironment@fba92d3], resourceBasePath = 'src/main/webapp', contextLoader = 'org.springframework.boot.test.context.SpringBootContextLoader', parent = [null]], attributes = map['org.springframework.test.context.web.ServletTestExecutionListener.activateListener' -> true]], class annotated with @DirtiesContext [false] with mode [null].

  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/
 :: Spring Boot ::       (v2.7.9-SNAPSHOT)

2023-03-02 14:42:03.485  INFO 19216 --- [    Test worker] c.w.WalletServiceIntegrationTest         : Starting WalletServiceIntegrationTest using Java 16.0.2 on WGC1009VT1F63 with PID 19216 (started by SSARA127 in C:\Users\SSARA127\Music\WalletApplication with connection of database)
2023-03-02 14:42:03.488  INFO 19216 --- [    Test worker] c.w.WalletServiceIntegrationTest         : No active profile set, falling back to 1 default profile: "default"
2023-03-02 14:42:04.977  INFO 19216 --- [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-03-02 14:42:05.078  INFO 19216 --- [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 88 ms. Found 1 JPA repository interfaces.
2023-03-02 14:42:06.263  INFO 19216 --- [    Test worker] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2023-03-02 14:42:06.377  INFO 19216 --- [    Test worker] org.hibernate.Version                    : HHH000412: Hibernate ORM core version 5.6.15.Final
2023-03-02 14:42:06.742  INFO 19216 --- [    Test worker] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.1.2.Final}
2023-03-02 14:42:06.990  INFO 19216 --- [    Test worker] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2023-03-02 14:42:07.367  INFO 19216 --- [    Test worker] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2023-03-02 14:42:07.401  INFO 19216 --- [    Test worker] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
Hibernate: create table wallet_dto (id integer not null, balanceamount double not null, dateofwalletcreation date, email varchar(255), nameofholder varchar(255), nameofwallet varchar(255), password varchar(255) not null, phone_number varchar(255), primary key (id))
2023-03-02 14:42:08.804  INFO 19216 --- [    Test worker] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-03-02 14:42:08.831  INFO 19216 --- [    Test worker] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-03-02 14:42:10.498  WARN 19216 --- [    Test worker] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-03-02 14:42:11.026  INFO 19216 --- [    Test worker] o.s.b.a.h2.H2ConsoleAutoConfiguration    : H2 console available at '/h2-console'. Database available at 'jdbc:h2:mem:test'
2023-03-02 14:42:13.464  INFO 19216 --- [    Test worker] c.w.WalletServiceIntegrationTest         : Started WalletServiceIntegrationTest in 10.608 seconds (JVM running for 13.361)
Wallet register successfully!
Hibernate: select walletdto0_.id as id1_0_0_, walletdto0_.balanceamount as balancea2_0_0_, walletdto0_.dateofwalletcreation as dateofwa3_0_0_, walletdto0_.email as email4_0_0_, walletdto0_.nameofholder as nameofho5_0_0_, walletdto0_.nameofwallet as nameofwa6_0_0_, walletdto0_.password as password7_0_0_, walletdto0_.phone_number as phone_nu8_0_0_ from wallet_dto walletdto0_ where walletdto0_.id=?
Hibernate: insert into wallet_dto (balanceamount, dateofwalletcreation, email, nameofholder, nameofwallet, password, phone_number, id) values (?, ?, ?, ?, ?, ?, ?, ?)
Wallet register successfully!
Hibernate: select walletdto0_.id as id1_0_0_, walletdto0_.balanceamount as balancea2_0_0_, walletdto0_.dateofwalletcreation as dateofwa3_0_0_, walletdto0_.email as email4_0_0_, walletdto0_.nameofholder as nameofho5_0_0_, walletdto0_.nameofwallet as nameofwa6_0_0_, walletdto0_.password as password7_0_0_, walletdto0_.phone_number as phone_nu8_0_0_ from wallet_dto walletdto0_ where walletdto0_.id=?
Hibernate: insert into wallet_dto (balanceamount, dateofwalletcreation, email, nameofholder, nameofwallet, password, phone_number, id) values (?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: select walletdto0_.id as id1_0_0_, walletdto0_.balanceamount as balancea2_0_0_, walletdto0_.dateofwalletcreation as dateofwa3_0_0_, walletdto0_.email as email4_0_0_, walletdto0_.nameofholder as nameofho5_0_0_, walletdto0_.nameofwallet as nameofwa6_0_0_, walletdto0_.password as password7_0_0_, walletdto0_.phone_number as phone_nu8_0_0_ from wallet_dto walletdto0_ where walletdto0_.id=?
Hibernate: select walletdto0_.id as id1_0_0_, walletdto0_.balanceamount as balancea2_0_0_, walletdto0_.dateofwalletcreation as dateofwa3_0_0_, walletdto0_.email as email4_0_0_, walletdto0_.nameofholder as nameofho5_0_0_, walletdto0_.nameofwallet as nameofwa6_0_0_, walletdto0_.password as password7_0_0_, walletdto0_.phone_number as phone_nu8_0_0_ from wallet_dto walletdto0_ where walletdto0_.id=?
Hibernate: select walletdto0_.id as id1_0_0_, walletdto0_.balanceamount as balancea2_0_0_, walletdto0_.dateofwalletcreation as dateofwa3_0_0_, walletdto0_.email as email4_0_0_, walletdto0_.nameofholder as nameofho5_0_0_, walletdto0_.nameofwallet as nameofwa6_0_0_, walletdto0_.password as password7_0_0_, walletdto0_.phone_number as phone_nu8_0_0_ from wallet_dto walletdto0_ where walletdto0_.id=?
Hibernate: update wallet_dto set balanceamount=?, dateofwalletcreation=?, email=?, nameofholder=?, nameofwallet=?, password=?, phone_number=? where id=?
Hibernate: select walletdto0_.id as id1_0_0_, walletdto0_.balanceamount as balancea2_0_0_, walletdto0_.dateofwalletcreation as dateofwa3_0_0_, walletdto0_.email as email4_0_0_, walletdto0_.nameofholder as nameofho5_0_0_, walletdto0_.nameofwallet as nameofwa6_0_0_, walletdto0_.password as password7_0_0_, walletdto0_.phone_number as phone_nu8_0_0_ from wallet_dto walletdto0_ where walletdto0_.id=?
Hibernate: update wallet_dto set balanceamount=?, dateofwalletcreation=?, email=?, nameofholder=?, nameofwallet=?, password=?, phone_number=? where id=?
From Wallet : Wallet{id=1, name_of_holder='saravanan', name_of_wallet='googlepay, email=saravanan@gmail.com,password=Sara@123,phoneNumber=9384196731,Date_of_wallet_creation=2023-03-02,Amount=34000.0}
To Wallet : Wallet{id=2, name_of_holder='saravanan', name_of_wallet='googlepay, email=saravanan@gmail.com,password=Sara@123,phoneNumber=9384196731,Date_of_wallet_creation=2023-03-02,Amount=4000.0}
Hibernate: select walletdto0_.id as id1_0_0_, walletdto0_.balanceamount as balancea2_0_0_, walletdto0_.dateofwalletcreation as dateofwa3_0_0_, walletdto0_.email as email4_0_0_, walletdto0_.nameofholder as nameofho5_0_0_, walletdto0_.nameofwallet as nameofwa6_0_0_, walletdto0_.password as password7_0_0_, walletdto0_.phone_number as phone_nu8_0_0_ from wallet_dto walletdto0_ where walletdto0_.id=?
Wallet found successfully!
Wallet register successfully!
Hibernate: select walletdto0_.id as id1_0_0_, walletdto0_.balanceamount as balancea2_0_0_, walletdto0_.dateofwalletcreation as dateofwa3_0_0_, walletdto0_.email as email4_0_0_, walletdto0_.nameofholder as nameofho5_0_0_, walletdto0_.nameofwallet as nameofwa6_0_0_, walletdto0_.password as password7_0_0_, walletdto0_.phone_number as phone_nu8_0_0_ from wallet_dto walletdto0_ where walletdto0_.id=?
Hibernate: update wallet_dto set balanceamount=?, dateofwalletcreation=?, email=?, nameofholder=?, nameofwallet=?, password=?, phone_number=? where id=?
Wallet register successfully!
Hibernate: select walletdto0_.id as id1_0_0_, walletdto0_.balanceamount as balancea2_0_0_, walletdto0_.dateofwalletcreation as dateofwa3_0_0_, walletdto0_.email as email4_0_0_, walletdto0_.nameofholder as nameofho5_0_0_, walletdto0_.nameofwallet as nameofwa6_0_0_, walletdto0_.password as password7_0_0_, walletdto0_.phone_number as phone_nu8_0_0_ from wallet_dto walletdto0_ where walletdto0_.id=?
Hibernate: update wallet_dto set balanceamount=?, dateofwalletcreation=?, email=?, nameofholder=?, nameofwallet=?, password=?, phone_number=? where id=?
Hibernate: select walletdto0_.id as id1_0_0_, walletdto0_.balanceamount as balancea2_0_0_, walletdto0_.dateofwalletcreation as dateofwa3_0_0_, walletdto0_.email as email4_0_0_, walletdto0_.nameofholder as nameofho5_0_0_, walletdto0_.nameofwallet as nameofwa6_0_0_, walletdto0_.password as password7_0_0_, walletdto0_.phone_number as phone_nu8_0_0_ from wallet_dto walletdto0_ where walletdto0_.id=?
Hibernate: select walletdto0_.id as id1_0_0_, walletdto0_.balanceamount as balancea2_0_0_, walletdto0_.dateofwalletcreation as dateofwa3_0_0_, walletdto0_.email as email4_0_0_, walletdto0_.nameofholder as nameofho5_0_0_, walletdto0_.nameofwallet as nameofwa6_0_0_, walletdto0_.password as password7_0_0_, walletdto0_.phone_number as phone_nu8_0_0_ from wallet_dto walletdto0_ where walletdto0_.id=?
Hibernate: update wallet_dto set balanceamount=?, dateofwalletcreation=?, email=?, nameofholder=?, nameofwallet=?, password=?, phone_number=? where id=?
Successfully fund added to wallet!
Wallet register successfully!
Hibernate: select walletdto0_.id as id1_0_0_, walletdto0_.balanceamount as balancea2_0_0_, walletdto0_.dateofwalletcreation as dateofwa3_0_0_, walletdto0_.email as email4_0_0_, walletdto0_.nameofholder as nameofho5_0_0_, walletdto0_.nameofwallet as nameofwa6_0_0_, walletdto0_.password as password7_0_0_, walletdto0_.phone_number as phone_nu8_0_0_ from wallet_dto walletdto0_ where walletdto0_.id=?
Hibernate: update wallet_dto set balanceamount=?, dateofwalletcreation=?, email=?, nameofholder=?, nameofwallet=?, password=?, phone_number=? where id=?
Wallet register successfully!
Hibernate: select walletdto0_.id as id1_0_0_, walletdto0_.balanceamount as balancea2_0_0_, walletdto0_.dateofwalletcreation as dateofwa3_0_0_, walletdto0_.email as email4_0_0_, walletdto0_.nameofholder as nameofho5_0_0_, walletdto0_.nameofwallet as nameofwa6_0_0_, walletdto0_.password as password7_0_0_, walletdto0_.phone_number as phone_nu8_0_0_ from wallet_dto walletdto0_ where walletdto0_.id=?
Hibernate: select walletdto0_.id as id1_0_0_, walletdto0_.balanceamount as balancea2_0_0_, walletdto0_.dateofwalletcreation as dateofwa3_0_0_, walletdto0_.email as email4_0_0_, walletdto0_.nameofholder as nameofho5_0_0_, walletdto0_.nameofwallet as nameofwa6_0_0_, walletdto0_.password as password7_0_0_, walletdto0_.phone_number as phone_nu8_0_0_ from wallet_dto walletdto0_ where walletdto0_.id=?
Wallet register successfully!
Hibernate: select walletdto0_.id as id1_0_0_, walletdto0_.balanceamount as balancea2_0_0_, walletdto0_.dateofwalletcreation as dateofwa3_0_0_, walletdto0_.email as email4_0_0_, walletdto0_.nameofholder as nameofho5_0_0_, walletdto0_.nameofwallet as nameofwa6_0_0_, walletdto0_.password as password7_0_0_, walletdto0_.phone_number as phone_nu8_0_0_ from wallet_dto walletdto0_ where walletdto0_.id=?
Wallet register successfully!
Hibernate: select walletdto0_.id as id1_0_0_, walletdto0_.balanceamount as balancea2_0_0_, walletdto0_.dateofwalletcreation as dateofwa3_0_0_, walletdto0_.email as email4_0_0_, walletdto0_.nameofholder as nameofho5_0_0_, walletdto0_.nameofwallet as nameofwa6_0_0_, walletdto0_.password as password7_0_0_, walletdto0_.phone_number as phone_nu8_0_0_ from wallet_dto walletdto0_ where walletdto0_.id=?
Hibernate: select walletdto0_.id as id1_0_0_, walletdto0_.balanceamount as balancea2_0_0_, walletdto0_.dateofwalletcreation as dateofwa3_0_0_, walletdto0_.email as email4_0_0_, walletdto0_.nameofholder as nameofho5_0_0_, walletdto0_.nameofwallet as nameofwa6_0_0_, walletdto0_.password as password7_0_0_, walletdto0_.phone_number as phone_nu8_0_0_ from wallet_dto walletdto0_ where walletdto0_.id=?
Hibernate: select walletdto0_.id as id1_0_0_, walletdto0_.balanceamount as balancea2_0_0_, walletdto0_.dateofwalletcreation as dateofwa3_0_0_, walletdto0_.email as email4_0_0_, walletdto0_.nameofholder as nameofho5_0_0_, walletdto0_.nameofwallet as nameofwa6_0_0_, walletdto0_.password as password7_0_0_, walletdto0_.phone_number as phone_nu8_0_0_ from wallet_dto walletdto0_ where walletdto0_.id=?
Hibernate: update wallet_dto set balanceamount=?, dateofwalletcreation=?, email=?, nameofholder=?, nameofwallet=?, password=?, phone_number=? where id=?
Successfully fund added to wallet!
Wallet register successfully!
Hibernate: select walletdto0_.id as id1_0_0_, walletdto0_.balanceamount as balancea2_0_0_, walletdto0_.dateofwalletcreation as dateofwa3_0_0_, walletdto0_.email as email4_0_0_, walletdto0_.nameofholder as nameofho5_0_0_, walletdto0_.nameofwallet as nameofwa6_0_0_, walletdto0_.password as password7_0_0_, walletdto0_.phone_number as phone_nu8_0_0_ from wallet_dto walletdto0_ where walletdto0_.id=?
Hibernate: update wallet_dto set balanceamount=?, dateofwalletcreation=?, email=?, nameofholder=?, nameofwallet=?, password=?, phone_number=? where id=?
Wallet register successfully!
Hibernate: select walletdto0_.id as id1_0_0_, walletdto0_.balanceamount as balancea2_0_0_, walletdto0_.dateofwalletcreation as dateofwa3_0_0_, walletdto0_.email as email4_0_0_, walletdto0_.nameofholder as nameofho5_0_0_, walletdto0_.nameofwallet as nameofwa6_0_0_, walletdto0_.password as password7_0_0_, walletdto0_.phone_number as phone_nu8_0_0_ from wallet_dto walletdto0_ where walletdto0_.id=?
Wallet register successfully!
Hibernate: select walletdto0_.id as id1_0_0_, walletdto0_.balanceamount as balancea2_0_0_, walletdto0_.dateofwalletcreation as dateofwa3_0_0_, walletdto0_.email as email4_0_0_, walletdto0_.nameofholder as nameofho5_0_0_, walletdto0_.nameofwallet as nameofwa6_0_0_, walletdto0_.password as password7_0_0_, walletdto0_.phone_number as phone_nu8_0_0_ from wallet_dto walletdto0_ where walletdto0_.id=?
Wallet register successfully!
Hibernate: select walletdto0_.id as id1_0_0_, walletdto0_.balanceamount as balancea2_0_0_, walletdto0_.dateofwalletcreation as dateofwa3_0_0_, walletdto0_.email as email4_0_0_, walletdto0_.nameofholder as nameofho5_0_0_, walletdto0_.nameofwallet as nameofwa6_0_0_, walletdto0_.password as password7_0_0_, walletdto0_.phone_number as phone_nu8_0_0_ from wallet_dto walletdto0_ where walletdto0_.id=?
Wallet register successfully!
Hibernate: select walletdto0_.id as id1_0_0_, walletdto0_.balanceamount as balancea2_0_0_, walletdto0_.dateofwalletcreation as dateofwa3_0_0_, walletdto0_.email as email4_0_0_, walletdto0_.nameofholder as nameofho5_0_0_, walletdto0_.nameofwallet as nameofwa6_0_0_, walletdto0_.password as password7_0_0_, walletdto0_.phone_number as phone_nu8_0_0_ from wallet_dto walletdto0_ where walletdto0_.id=?
Hibernate: select walletdto0_.id as id1_0_0_, walletdto0_.balanceamount as balancea2_0_0_, walletdto0_.dateofwalletcreation as dateofwa3_0_0_, walletdto0_.email as email4_0_0_, walletdto0_.nameofholder as nameofho5_0_0_, walletdto0_.nameofwallet as nameofwa6_0_0_, walletdto0_.password as password7_0_0_, walletdto0_.phone_number as phone_nu8_0_0_ from wallet_dto walletdto0_ where walletdto0_.id=?
Hibernate: select walletdto0_.id as id1_0_0_, walletdto0_.balanceamount as balancea2_0_0_, walletdto0_.dateofwalletcreation as dateofwa3_0_0_, walletdto0_.email as email4_0_0_, walletdto0_.nameofholder as nameofho5_0_0_, walletdto0_.nameofwallet as nameofwa6_0_0_, walletdto0_.password as password7_0_0_, walletdto0_.phone_number as phone_nu8_0_0_ from wallet_dto walletdto0_ where walletdto0_.id=?
Hibernate: delete from wallet_dto where id=?
Wallet deleted successfully!
Wallet register successfully!
Hibernate: select walletdto0_.id as id1_0_0_, walletdto0_.balanceamount as balancea2_0_0_, walletdto0_.dateofwalletcreation as dateofwa3_0_0_, walletdto0_.email as email4_0_0_, walletdto0_.nameofholder as nameofho5_0_0_, walletdto0_.nameofwallet as nameofwa6_0_0_, walletdto0_.password as password7_0_0_, walletdto0_.phone_number as phone_nu8_0_0_ from wallet_dto walletdto0_ where walletdto0_.id=?
Hibernate: insert into wallet_dto (balanceamount, dateofwalletcreation, email, nameofholder, nameofwallet, password, phone_number, id) values (?, ?, ?, ?, ?, ?, ?, ?)
Wallet register successfully!
Hibernate: select walletdto0_.id as id1_0_0_, walletdto0_.balanceamount as balancea2_0_0_, walletdto0_.dateofwalletcreation as dateofwa3_0_0_, walletdto0_.email as email4_0_0_, walletdto0_.nameofholder as nameofho5_0_0_, walletdto0_.nameofwallet as nameofwa6_0_0_, walletdto0_.password as password7_0_0_, walletdto0_.phone_number as phone_nu8_0_0_ from wallet_dto walletdto0_ where walletdto0_.id=?
Hibernate: select walletdto0_.id as id1_0_0_, walletdto0_.balanceamount as balancea2_0_0_, walletdto0_.dateofwalletcreation as dateofwa3_0_0_, walletdto0_.email as email4_0_0_, walletdto0_.nameofholder as nameofho5_0_0_, walletdto0_.nameofwallet as nameofwa6_0_0_, walletdto0_.password as password7_0_0_, walletdto0_.phone_number as phone_nu8_0_0_ from wallet_dto walletdto0_ where walletdto0_.id=?
Hibernate: select walletdto0_.id as id1_0_0_, walletdto0_.balanceamount as balancea2_0_0_, walletdto0_.dateofwalletcreation as dateofwa3_0_0_, walletdto0_.email as email4_0_0_, walletdto0_.nameofholder as nameofho5_0_0_, walletdto0_.nameofwallet as nameofwa6_0_0_, walletdto0_.password as password7_0_0_, walletdto0_.phone_number as phone_nu8_0_0_ from wallet_dto walletdto0_ where walletdto0_.id=?
Hibernate: update wallet_dto set balanceamount=?, dateofwalletcreation=?, email=?, nameofholder=?, nameofwallet=?, password=?, phone_number=? where id=?
Successfully fund withdrawn from wallet!
Wallet register successfully!
Hibernate: select walletdto0_.id as id1_0_0_, walletdto0_.balanceamount as balancea2_0_0_, walletdto0_.dateofwalletcreation as dateofwa3_0_0_, walletdto0_.email as email4_0_0_, walletdto0_.nameofholder as nameofho5_0_0_, walletdto0_.nameofwallet as nameofwa6_0_0_, walletdto0_.password as password7_0_0_, walletdto0_.phone_number as phone_nu8_0_0_ from wallet_dto walletdto0_ where walletdto0_.id=?
Hibernate: update wallet_dto set balanceamount=?, dateofwalletcreation=?, email=?, nameofholder=?, nameofwallet=?, password=?, phone_number=? where id=?
Wallet register successfully!
Hibernate: select walletdto0_.id as id1_0_0_, walletdto0_.balanceamount as balancea2_0_0_, walletdto0_.dateofwalletcreation as dateofwa3_0_0_, walletdto0_.email as email4_0_0_, walletdto0_.nameofholder as nameofho5_0_0_, walletdto0_.nameofwallet as nameofwa6_0_0_, walletdto0_.password as password7_0_0_, walletdto0_.phone_number as phone_nu8_0_0_ from wallet_dto walletdto0_ where walletdto0_.id=?
Hibernate: select walletdto0_.id as id1_0_0_, walletdto0_.balanceamount as balancea2_0_0_, walletdto0_.dateofwalletcreation as dateofwa3_0_0_, walletdto0_.email as email4_0_0_, walletdto0_.nameofholder as nameofho5_0_0_, walletdto0_.nameofwallet as nameofwa6_0_0_, walletdto0_.password as password7_0_0_, walletdto0_.phone_number as phone_nu8_0_0_ from wallet_dto walletdto0_ where walletdto0_.id=?
Wallet found successfully!
Wallet register successfully!
Hibernate: select walletdto0_.id as id1_0_0_, walletdto0_.balanceamount as balancea2_0_0_, walletdto0_.dateofwalletcreation as dateofwa3_0_0_, walletdto0_.email as email4_0_0_, walletdto0_.nameofholder as nameofho5_0_0_, walletdto0_.nameofwallet as nameofwa6_0_0_, walletdto0_.password as password7_0_0_, walletdto0_.phone_number as phone_nu8_0_0_ from wallet_dto walletdto0_ where walletdto0_.id=?
Wallet register successfully!
Hibernate: select walletdto0_.id as id1_0_0_, walletdto0_.balanceamount as balancea2_0_0_, walletdto0_.dateofwalletcreation as dateofwa3_0_0_, walletdto0_.email as email4_0_0_, walletdto0_.nameofholder as nameofho5_0_0_, walletdto0_.nameofwallet as nameofwa6_0_0_, walletdto0_.password as password7_0_0_, walletdto0_.phone_number as phone_nu8_0_0_ from wallet_dto walletdto0_ where walletdto0_.id=?
Wallet register successfully!
Hibernate: select walletdto0_.id as id1_0_0_, walletdto0_.balanceamount as balancea2_0_0_, walletdto0_.dateofwalletcreation as dateofwa3_0_0_, walletdto0_.email as email4_0_0_, walletdto0_.nameofholder as nameofho5_0_0_, walletdto0_.nameofwallet as nameofwa6_0_0_, walletdto0_.password as password7_0_0_, walletdto0_.phone_number as phone_nu8_0_0_ from wallet_dto walletdto0_ where walletdto0_.id=?
Hibernate: select walletdto0_.id as id1_0_0_, walletdto0_.balanceamount as balancea2_0_0_, walletdto0_.dateofwalletcreation as dateofwa3_0_0_, walletdto0_.email as email4_0_0_, walletdto0_.nameofholder as nameofho5_0_0_, walletdto0_.nameofwallet as nameofwa6_0_0_, walletdto0_.password as password7_0_0_, walletdto0_.phone_number as phone_nu8_0_0_ from wallet_dto walletdto0_ where walletdto0_.id=?
Wallet updated successfully!
Hibernate: select walletdto0_.id as id1_0_0_, walletdto0_.balanceamount as balancea2_0_0_, walletdto0_.dateofwalletcreation as dateofwa3_0_0_, walletdto0_.email as email4_0_0_, walletdto0_.nameofholder as nameofho5_0_0_, walletdto0_.nameofwallet as nameofwa6_0_0_, walletdto0_.password as password7_0_0_, walletdto0_.phone_number as phone_nu8_0_0_ from wallet_dto walletdto0_ where walletdto0_.id=?
Hibernate: update wallet_dto set balanceamount=?, dateofwalletcreation=?, email=?, nameofholder=?, nameofwallet=?, password=?, phone_number=? where id=?
Hibernate: select walletdto0_.id as id1_0_0_, walletdto0_.balanceamount as balancea2_0_0_, walletdto0_.dateofwalletcreation as dateofwa3_0_0_, walletdto0_.email as email4_0_0_, walletdto0_.nameofholder as nameofho5_0_0_, walletdto0_.nameofwallet as nameofwa6_0_0_, walletdto0_.password as password7_0_0_, walletdto0_.phone_number as phone_nu8_0_0_ from wallet_dto walletdto0_ where walletdto0_.id=?
Wallet found successfully!
Wallet register successfully!
Hibernate: select walletdto0_.id as id1_0_0_, walletdto0_.balanceamount as balancea2_0_0_, walletdto0_.dateofwalletcreation as dateofwa3_0_0_, walletdto0_.email as email4_0_0_, walletdto0_.nameofholder as nameofho5_0_0_, walletdto0_.nameofwallet as nameofwa6_0_0_, walletdto0_.password as password7_0_0_, walletdto0_.phone_number as phone_nu8_0_0_ from wallet_dto walletdto0_ where walletdto0_.id=?
Hibernate: update wallet_dto set balanceamount=?, dateofwalletcreation=?, email=?, nameofholder=?, nameofwallet=?, password=?, phone_number=? where id=?
Wallet register successfully!
Hibernate: select walletdto0_.id as id1_0_0_, walletdto0_.balanceamount as balancea2_0_0_, walletdto0_.dateofwalletcreation as dateofwa3_0_0_, walletdto0_.email as email4_0_0_, walletdto0_.nameofholder as nameofho5_0_0_, walletdto0_.nameofwallet as nameofwa6_0_0_, walletdto0_.password as password7_0_0_, walletdto0_.phone_number as phone_nu8_0_0_ from wallet_dto walletdto0_ where walletdto0_.id=?
Hibernate: select walletdto0_.id as id1_0_0_, walletdto0_.balanceamount as balancea2_0_0_, walletdto0_.dateofwalletcreation as dateofwa3_0_0_, walletdto0_.email as email4_0_0_, walletdto0_.nameofholder as nameofho5_0_0_, walletdto0_.nameofwallet as nameofwa6_0_0_, walletdto0_.password as password7_0_0_, walletdto0_.phone_number as phone_nu8_0_0_ from wallet_dto walletdto0_ where walletdto0_.id=?
Wallet register successfully!
Hibernate: select walletdto0_.id as id1_0_0_, walletdto0_.balanceamount as balancea2_0_0_, walletdto0_.dateofwalletcreation as dateofwa3_0_0_, walletdto0_.email as email4_0_0_, walletdto0_.nameofholder as nameofho5_0_0_, walletdto0_.nameofwallet as nameofwa6_0_0_, walletdto0_.password as password7_0_0_, walletdto0_.phone_number as phone_nu8_0_0_ from wallet_dto walletdto0_ where walletdto0_.id=?
Wallet register successfully!
Hibernate: select walletdto0_.id as id1_0_0_, walletdto0_.balanceamount as balancea2_0_0_, walletdto0_.dateofwalletcreation as dateofwa3_0_0_, walletdto0_.email as email4_0_0_, walletdto0_.nameofholder as nameofho5_0_0_, walletdto0_.nameofwallet as nameofwa6_0_0_, walletdto0_.password as password7_0_0_, walletdto0_.phone_number as phone_nu8_0_0_ from wallet_dto walletdto0_ where walletdto0_.id=?
Hibernate: select walletdto0_.id as id1_0_0_, walletdto0_.balanceamount as balancea2_0_0_, walletdto0_.dateofwalletcreation as dateofwa3_0_0_, walletdto0_.email as email4_0_0_, walletdto0_.nameofholder as nameofho5_0_0_, walletdto0_.nameofwallet as nameofwa6_0_0_, walletdto0_.password as password7_0_0_, walletdto0_.phone_number as phone_nu8_0_0_ from wallet_dto walletdto0_ where walletdto0_.id=?
Wallet updated successfully!
Hibernate: select walletdto0_.id as id1_0_0_, walletdto0_.balanceamount as balancea2_0_0_, walletdto0_.dateofwalletcreation as dateofwa3_0_0_, walletdto0_.email as email4_0_0_, walletdto0_.nameofholder as nameofho5_0_0_, walletdto0_.nameofwallet as nameofwa6_0_0_, walletdto0_.password as password7_0_0_, walletdto0_.phone_number as phone_nu8_0_0_ from wallet_dto walletdto0_ where walletdto0_.id=?
Hibernate: update wallet_dto set balanceamount=?, dateofwalletcreation=?, email=?, nameofholder=?, nameofwallet=?, password=?, phone_number=? where id=?
Hibernate: select walletdto0_.id as id1_0_0_, walletdto0_.balanceamount as balancea2_0_0_, walletdto0_.dateofwalletcreation as dateofwa3_0_0_, walletdto0_.email as email4_0_0_, walletdto0_.nameofholder as nameofho5_0_0_, walletdto0_.nameofwallet as nameofwa6_0_0_, walletdto0_.password as password7_0_0_, walletdto0_.phone_number as phone_nu8_0_0_ from wallet_dto walletdto0_ where walletdto0_.id=?
Wallet found successfully!
]]></system-out>
  <system-err><![CDATA[]]></system-err>
</testsuite>
